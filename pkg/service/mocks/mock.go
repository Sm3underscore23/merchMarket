// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	models "github.com/Sm3underscore23/merchStore/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
	isgomock struct{}
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockAuthorization) AuthUser(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockAuthorizationMockRecorder) AuthUser(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockAuthorization)(nil).AuthUser), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
	isgomock struct{}
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockInfo) GetUserInfo(id int) (models.UserInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", id)
	ret0, _ := ret[0].(models.UserInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockInfoMockRecorder) GetUserInfo(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockInfo)(nil).GetUserInfo), id)
}

// MockSendCoins is a mock of SendCoins interface.
type MockSendCoins struct {
	ctrl     *gomock.Controller
	recorder *MockSendCoinsMockRecorder
	isgomock struct{}
}

// MockSendCoinsMockRecorder is the mock recorder for MockSendCoins.
type MockSendCoinsMockRecorder struct {
	mock *MockSendCoins
}

// NewMockSendCoins creates a new mock instance.
func NewMockSendCoins(ctrl *gomock.Controller) *MockSendCoins {
	mock := &MockSendCoins{ctrl: ctrl}
	mock.recorder = &MockSendCoinsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSendCoins) EXPECT() *MockSendCoinsMockRecorder {
	return m.recorder
}

// SendCoins mocks base method.
func (m *MockSendCoins) SendCoins(toUserUsername string, fromUserId, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", toUserUsername, fromUserId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockSendCoinsMockRecorder) SendCoins(toUserUsername, fromUserId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockSendCoins)(nil).SendCoins), toUserUsername, fromUserId, amount)
}

// MockBuy is a mock of Buy interface.
type MockBuy struct {
	ctrl     *gomock.Controller
	recorder *MockBuyMockRecorder
	isgomock struct{}
}

// MockBuyMockRecorder is the mock recorder for MockBuy.
type MockBuyMockRecorder struct {
	mock *MockBuy
}

// NewMockBuy creates a new mock instance.
func NewMockBuy(ctrl *gomock.Controller) *MockBuy {
	mock := &MockBuy{ctrl: ctrl}
	mock.recorder = &MockBuyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuy) EXPECT() *MockBuyMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockBuy) Buy(userId int, productType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", userId, productType)
	ret0, _ := ret[0].(error)
	return ret0
}

// Buy indicates an expected call of Buy.
func (mr *MockBuyMockRecorder) Buy(userId, productType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockBuy)(nil).Buy), userId, productType)
}
